# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  books(relativePath: String): Books!
  booksConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BooksFilter): BooksConnection!
}

input DocumentFilter {
  books: BooksFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Books | Folder

type Books implements Node & Document {
  title: String!
  author: String!
  description: JSON!
  format: String!
  price: Float!
  coverImageUrl: String!
  category: String!
  publishedYear: Float!
  pages: Float!
  isbn: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooksFilter {
  title: StringFilter
  author: StringFilter
  description: RichTextFilter
  format: StringFilter
  price: NumberFilter
  coverImageUrl: ImageFilter
  category: StringFilter
  publishedYear: NumberFilter
  pages: NumberFilter
  isbn: StringFilter
  body: RichTextFilter
}

type BooksConnectionEdges {
  cursor: String!
  node: Books
}

type BooksConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BooksConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateBooks(relativePath: String!, params: BooksMutation!): Books!
  createBooks(relativePath: String!, params: BooksMutation!): Books!
}

input DocumentUpdateMutation {
  books: BooksMutation
  relativePath: String
}

input DocumentMutation {
  books: BooksMutation
}

input BooksMutation {
  title: String
  author: String
  description: JSON
  format: String
  price: Float
  coverImageUrl: String
  category: String
  publishedYear: Float
  pages: Float
  isbn: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
